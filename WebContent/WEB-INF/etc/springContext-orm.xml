<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- spring注解自动注入 -->
	<context:component-scan base-package="per.itachi.test.pojo.postgresql"></context:component-scan>

	<!-- 引入外部属性文件 jndi? -->
	<context:property-placeholder location="/WEB-INF/etc/jdbc.properties" /><!-- classpath:jdbc.properties -->

	<!-- 添加c3p0数据库连接池 bean -->
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据库连接配置 -->
		<property name="driverClass" value="${jdbc.postgresql.driver}" />
		<property name="jdbcUrl" value="${jdbc.postgresql.url}" />
		<property name="user" value="${jdbc.postgresql.username}" />
		<property name="password" value="${jdbc.postgresql.password}" />
		<!-- 每300秒检查所有连接池中的空闲连接 -->
		<property name="idleConnectionTestPeriod" value="300"></property>
		<!-- 最大空闲时间,900秒内未使用则连接被丢弃。若为0则永不丢弃 -->
		<property name="maxIdleTime" value="900"></property>
		<!-- 最大连接数 -->
		<property name="maxPoolSize" value="2"></property>
	</bean>
	<!-- 添加sessionFactory bean，注意，该类是Spring提供的 -->
	<!-- I think it is better to use default(singleton) instead of scope="prototype" as scope -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入连接池，包含了数据库用户名，密码等等信息 -->
		<property name="dataSource" ref="myDataSource" />

		<!-- 配置Hibernate的其他的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<!-- 开机自动生成表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 引用*.hbm.xml映射文件 -->
<!-- 		<property name="mappingResources"> -->
<!-- 			<list> -->
<!-- 				<value>/WEB-INF/etc/mapping/User.hbm.xml</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
		<property name="mappingLocations">
			<list>
				<value>/WEB-INF/etc/mapping/User.hbm.xml</value>
			</list>
		</property>
		<!-- 引用*.hbm.xml映射文件夹 -->
<!-- 		<property name="mappingDirectoryLocations"> -->
<!-- 			<list> -->
<!-- 				<value>/WEB-INF/etc/mapping</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
	</bean>
	<bean id="trxMgr" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 
		Spring transaction management Spring事务管理 
		tx:annotation-driven主要用于加载@Transactional(?)，需要在dao或者service添加注解
		tx:advice通过AOP方式切面注入管理事务，需要配置aop:config启用Spring AOP切面
		tx:annotation-driven与tx:advice二选一即可，没有必要都用(?)
		spring事务管理原理的简单讲解 http://www.cnblogs.com/fjdingsd/p/5632949.html
		事务四特性 ACID Atomic, consistency, isolation, durability
		数据库中事务开始的标志，是在第一次执行DML语句，或者上一个事务结束再一次执行DML豫剧的时候。
		对于select启用事务是因为某些多语句查询牵涉数据较多，为了保证事务一致性通常会打开事务在事务中查询，如果是短时间单一查询可以不用。
	-->
	<!-- transaction-manager doesn't make differences? -->
<!-- 	<tx:annotation-driven transaction-manager="trxMgr" /> -->
	<tx:advice id="trxAdvice" transaction-manager="trxMgr">
		<tx:attributes>
			<!-- tx:method中的属性除name以外皆非必须，
				propagation 事务传播行为，默认值为REQUIRED，可在org.springframework.transaction.TransactionDefinition中查询
				propagation 有可能是spring为了事务管理自创的机制，与数据库本身的功能无关。
				isolation 事务隔离级别，默认值为DEFAULT(数据库的默认级别?)，可在org.springframework.transaction.TransactionDefinition中查询
				timeout 事务超时时间，默认值为-1(不超时)，单位秒
				read-only 事物是否只读，默认为false，若设置为只读则在处理增删改操作时候会报错失败
				rollback-for 触发回滚的异常，以逗号分隔
				no-rollback-for 不触发回滚的异常，以逗号分隔
				默认情况下，任何RuntimeException将触发回滚，任何检查异常不触发回滚。
			-->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 
		Spring AOP Spring面向页面编程
		Spring AOP原理简介http://www.importnew.com/24305.html
		在service层添加事务(?)
	 -->
	<aop:config expose-proxy="true">
		<aop:pointcut expression="execution(public * per.itachi.test.service.impl.*.*(..))" id="pointcut" />
		<aop:advisor advice-ref="trxAdvice" pointcut-ref="pointcut" />
	</aop:config>
</beans>