<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- spring注解自动注入 -->
	<context:component-scan base-package="per.itachi.test.pojo.oracle"></context:component-scan>

	<!-- 引入外部属性文件 jndi? -->
<!-- 	<context:property-placeholder location="/WEB-INF/etc/jdbc.properties" ignore-unresolvable="false"/> -->

	<!-- 数据库连接配置 -->
	<!-- 
		按照spring-jdbc自己的说法是一个标准jdbc简单实现，并非一个真的连接池，也不会池化连接还是每次返回一个新的(?)
	 -->
<!-- 	<bean id="dataSourceOracle" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="${jdbc.oracle.driver}" /> -->
<!-- 		<property name="url" value="${jdbc.oracle.url}" /> -->
<!-- 		<property name="username" value="${jdbc.oracle.username}" /> -->
<!-- 		<property name="password" value="${jdbc.oracle.password}" /> -->
<!-- 	</bean> -->
	<bean id="dataSourceOracle" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg name="configuration">
			<!-- 这种内部嵌套的不能够注入 -->
			<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
				<!-- 
					property不允许子节点，节点中写不了值，要不会报错
					org.xml.sax.SAXParseException; lineNumber: 36; columnNumber: 93; cvc-complex-type.2.3: 
					Element 'property' cannot have character [children], because the type's content type is element-only
				 -->
				<property name="driverClassName" value="${jdbc.oracle.driver}"></property>
				<property name="jdbcUrl" value="${jdbc.oracle.url}"></property>
				<property name="username" value="${jdbc.oracle.username}"></property>
				<property name="password" value="${jdbc.oracle.password}"></property>
				<!-- 连接只读数据库时配置为true， 保证安全 -->
				<property name="readOnly" value="false"></property>
				<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
				<property name="connectionTimeout" value="30000"></property>
				<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
				<property name="idleTimeout" value="600000"></property>
				<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
					wait_timeout参数（show variables like '%timeout%';） -->
				<property name="maxLifetime" value="1800000"></property>
				<!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
				<property name="maximumPoolSize" value="30"></property>
				<property name="minimumIdle" value="5"></property>
				<!-- 连接池的名字 -->
				<property name="poolName" value="MybatisHikariPool"></property>
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="mybatisSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="/WEB-INF/etc/mybatis-config.xml" />
		<property name="dataSource" ref="dataSourceOracle" />
<!-- 		<property name="mapperLocations" value="classpath:com/hua/saf/**/*.xml" /> -->
		<!-- 自动扫描mapping.xml文件，**表示迭代查找,也可在sqlMapConfig.xml中单独指定xml文件-->
<!-- 		<property name="mapperLocations" value="classpath:per/itachi/**/*.xml" /> -->
		<property name="mapperLocations">
			<list>
				<value>/WEB-INF/etc/mapping/mybatis/User.mapper.xml</value>
				<value>/WEB-INF/etc/mapping/mybatis/BankCity.mapper.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 
		如果要实现DAO的话可以把这个template注入到dao的实现类中，由于这个有提交操作所以在事务管理上是个谜(?)
	 -->
<!-- 	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> -->
<!-- 		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg> -->
<!-- 	</bean> -->
	
	
	<!-- 
		用这种方式注入DAO可以不用实现dao接口，mapperxml中配置的namespace必须为dao的全名，就是不能指定dao的名字；
		DAO接口所在包名，Spring会自动查找其下的类 ，包下的类需要使用@MapperScan注解，否则容器注入会失败；
		还有一种可以直接继承SqlSessionDaoSupport的方法可以不在该xml文件中配置
	 -->
<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
<!-- 		<property name="basePackage" value="per.itachi.test.pojo.oracle.*" /> -->
<!-- 		<property name="sqlSessionFactoryBeanName" value="mybatisSessionFactory" /> -->
<!-- 	</bean> -->
	
	<!-- 
		配置这项可以不用实现dao的接口，直接注入到service层的dao引用就行了，
		如果不用这种代理形式而直接实现mapperdao的话，可以用SqlSessionTemplate在mapperdao中调用，
		spring事务管理方面存疑
	 -->
	<bean id="oracleUserDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="per.itachi.test.dao.oracle.UserDao" />
		<property name="sqlSessionFactory" ref="mybatisSessionFactory" />
	</bean>
	<bean id="oracleBankCityDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="per.itachi.test.dao.oracle.BankCityDao" />
		<property name="sqlSessionFactory" ref="mybatisSessionFactory" />
	</bean>
	
	
	<!-- 
		mybatis-spring版本不正确有可能会导致以下问题
		java.lang.AbstractMethodError: org.mybatis.spring.transaction.SpringManagedTransaction.getTimeout()Ljava/lang/Integer;
		参考文章：https://www.cnblogs.com/beppezhang/p/6118661.html
	 -->
	<!-- spring的datasource事务管理，与hibernate的HibernateTransactionManager不同的是这个只能将datasource作为管理对象 -->
	<bean id="trxMgrMybatis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceOracle" />
	</bean>
	
	<!-- 
		Spring transaction management Spring事务管理 
		tx:annotation-driven主要用于加载@Transactional(?)，需要在dao或者service添加注解
		tx:advice通过AOP方式切面注入管理事务，需要配置aop:config启用Spring AOP切面
		tx:annotation-driven与tx:advice二选一即可，没有必要都用(?)
		spring事务管理原理的简单讲解 http://www.cnblogs.com/fjdingsd/p/5632949.html
		事务四特性 ACID Atomic, consistency, isolation, durability
		数据库中事务开始的标志，是在第一次执行DML语句，或者上一个事务结束再一次执行DML豫剧的时候。
		对于select启用事务是因为某些多语句查询牵涉数据较多，为了保证事务一致性通常会打开事务在事务中查询，如果是短时间单一查询可以不用。
	-->
	<!-- transaction-manager doesn't make differences? -->
<!-- 	<tx:annotation-driven transaction-manager="trxMgrMybatis" /> -->
	<tx:advice id="trxAdviceMybatis" transaction-manager="trxMgrMybatis">
		<tx:attributes>
			<!-- tx:method中的属性除name以外皆非必须，
				propagation 事务传播行为，默认值为REQUIRED，可在org.springframework.transaction.TransactionDefinition中查询
				propagation 有可能是spring为了事务管理自创的机制，与数据库本身的功能无关。
				isolation 事务隔离级别，默认值为DEFAULT(数据库的默认级别?)，可在org.springframework.transaction.TransactionDefinition中查询
				timeout 事务超时时间，默认值为-1(不超时)，单位秒
				read-only 事物是否只读，默认为false，若设置为只读则在处理增删改操作时候会报错失败(?)
				rollback-for 触发回滚的异常，以逗号分隔
				no-rollback-for 不触发回滚的异常，以逗号分隔
				默认情况下，任何RuntimeException将触发回滚，任何检查异常不触发回滚。
			-->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="test*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 
		Spring AOP Spring面向页面编程
		Spring AOP原理简介http://www.importnew.com/24305.html
		在service层添加事务(?)
	 -->
	<aop:config expose-proxy="true">
		<aop:pointcut expression="execution(public * per.itachi.test.service.oracle.impl.*.*(..))" id="pointcut" />
		<aop:advisor advice-ref="trxAdviceMybatis" pointcut-ref="pointcut" />
	</aop:config>
</beans>