<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns="http://java.sun.com/xml/ns/javaee" 
		xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
		id="testWebApp" version="3.0">
		
	<display-name>testWeb</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
		<welcome-file>pages/default.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- not necessary? By default, web server search *.tld files in /WEB-INF.-->
	<!-- But it seems necessary to add several *.tld files. -->
	<!-- 
		When starting up, the following message will be showed. To be invested...
		Jun 09, 2017 4:44:22 PM org.apache.catalina.startup.TaglibUriRule body
		INFO: TLD skipped. URI: http://java.sun.com/jstl/core is already defined
	 -->
	<jsp-config>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
			<taglib-location>/WEB-INF/jstl/c.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
			<taglib-location>/WEB-INF/jstl/fmt.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/functions</taglib-uri>
			<taglib-location>/WEB-INF/jstl/fn.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/sql</taglib-uri>
			<taglib-location>/WEB-INF/jstl/sql.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://java.sun.com/jsp/jstl/xml</taglib-uri>
			<taglib-location>/WEB-INF/jstl/x.tld</taglib-location>
		</taglib>
	</jsp-config>
	
	<context-param>
		<!-- spring parameter? -->
		<param-name>webAppRootKey</param-name>
		<!-- default value is webapp.root -->
		<param-value>itachi.test.web</param-value>
	</context-param>
	<context-param>
		<!-- spring parameter? It doesn't work without spring framework. -->
		<!-- When using eclipse to start up web server, need to set working directory to a correct location, such as, current directory. -->
		<!-- 
				Otherwise, some files are not found 
				java.io.FileNotFoundException: WEB-INF\etc\log4j.xml 
				(The system cannot find the path specified) 
		-->
		<param-name></param-name><!-- log4jConfiguration / log4jConfigLocation-->
		<param-value></param-value><!-- no need to add root path "/"? -->
	</context-param>
	<!-- Test what will happen if there are 2 same context parameters in web.xml -->
	<!-- As a result, tomcat doesn't report error, and value will be the latest one. -->
	<!-- For this instant, it is /WEB-INF/etc/log4j.properties -->
<!-- 	<context-param> -->
<!-- 		<param-name>log4jConfigLocation</param-name> -->
<!-- 		<param-value>/WEB-INF/etc/log4j.xml</param-value> -->
<!-- 	</context-param> -->
<!-- 	<context-param> -->
<!-- 		<param-name>log4jConfigLocation</param-name> -->
<!-- 		<param-value>/WEB-INF/etc/log4j.properties</param-value> -->
<!-- 	</context-param> -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/etc/springContext.xml,
			/WEB-INF/etc/springContext-orm-hibernate.xml,
<!-- 			/WEB-INF/etc/springContext-orm-mybatis.xml, -->
<!-- 			/WEB-INF/etc/springContext-orm-*.xml, -->
			/WEB-INF/etc/springContext-jms-rabbitmq.xml,
		</param-value>
	</context-param>
	
	
	<!-- Order of loading is listener > filter > servlet -->
	<!-- Order of executing is listener > filter > servlet -->
	<!-- Is there order of destroying? -->
	<!-- But it doesn't matter what order these 3 classes are configured into web.xml using. -->
	<!-- In other word, even if listener is configured after filter, listener will still start up at first. -->
	
	<!-- listener -->
	<listener>
		<description>
			This listener is to test whether the order of configuration in web.xml has influence on 
			the order of loading and executing. 
			As a consequence, it's yes. 
			In other word, first configured, first load and execute, when initialising.
			And in reserve when destroying. 
		</description>
		<!-- 2 different configured listeners, even if with the same display name, will be loaded by each. -->
		<!-- In other word, this listener with TestingRequestListener, eventually, will be loaded. -->
		<display-name>TestingOrderListener</display-name>
		<listener-class>per.itachi.test.listener.TestingOrderListener</listener-class>
	</listener>
	<listener>
		<display-name>TestingRequestListener</display-name>
		<listener-class>per.itachi.test.listener.TestingRequestListener</listener-class>
	</listener>
	<listener>
		<!-- sequence of elements, unexpectedly -->
		<description>
			The same listener won't be loaded(instantiated) twice in the same one running web server.
		</description>
		<display-name>TestingRequestListener</display-name>
		<listener-class>per.itachi.test.listener.TestingRequestListener</listener-class>
	</listener>
	<listener>
		<display-name>TestingSessionListener</display-name>
		<listener-class>per.itachi.test.listener.TestingSessionListener</listener-class>
	</listener>
	<listener>
		<display-name>TestingContextListener</display-name>
		<listener-class>per.itachi.test.listener.TestingContextListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>


	<!-- filter -->
	<!-- 
		在filter-mapping中配置不存在的filter-name将导致以下异常而不能启动tomcat
		 java.lang.IllegalArgumentException: Filter mapping specifies an unknown filter name OpenSessionInViewFilter
	 -->
	<filter>
		<filter-name>TestingFilter</filter-name>
		<filter-class>per.itachi.test.filter.TestingFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>TestingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 
		spring+hibernate配合使用时候对于数据延迟加载session提前关闭的解决方案，也可以使用OpenSessionInViewInterceptor拦截器
		解决了could not initalize proxy - no Session问题 
		OpenSessionInViewFilter的主要功能是用来把一个Hibernate Session和一次完整的请求过程对应的线程相绑定。
		目的是为了实现"Open Session in View"的模式。例如： 它允许在事务提交之后延迟加载显示所需要的对象。
		OpenSessionInViewFilter 过滤器将 Hibernate Session 绑定到请求线程中，它将自动被 Spring 的事务管理器探测到。
		所以 OpenSessionInViewFilter 适用于 Service 层使用HibernateTransactionManager 或 JtaTransactionManager 进行事务管理的环境，
		也可以用于非事务只读的数据操作中。
		存在副作用，在整个request期间session都是open状态，该数据库连接一直被占用，在有限的连接中若某次处理时间过长，讲不能够及时响应。
		session生命周期可能会比事务长。
		公网上内容多流量大的网站请慎用。
		如果使用了struts2需要放到StrutsPrepareAndExecuteFilter之前才可以生效(?)
		如果没有sessionFactory启动的时候不会报错，涉及到数据库操作应该会报错
	-->
<!-- 	<filter> -->
<!-- 		<filter-name>OpenSessionInViewFilter</filter-name> -->
<!-- 		<filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class> -->
<!-- 	</filter> -->
<!-- 	<filter-mapping> -->
<!-- 		<filter-name>OpenSessionInViewFilter</filter-name> -->
<!-- 		<url-pattern>/springmvc/*</url-pattern> -->
<!-- 	</filter-mapping> -->
	
	
	<!-- It is said that servlet just matches once? precise matching pattern?-->
	<servlet>
		<servlet-name>TestingServlet</servlet-name>
		<servlet-class>per.itachi.test.servlet.TestingServlet</servlet-class>
	</servlet>
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/etc/springContext-mvc.xml</param-value>
		</init-param>
	</servlet>
	
	<!-- 
		url-pattern 
		/ 和 /* 都能够匹配所有资源，包括扩展名，/*本身属于路径匹配，路径为/ 
		http://www.cnblogs.com/51kata/p/5152400.html
		精确匹配(非/和不带*的)、扩展名匹配(*.do)、路径匹配(/spring/*)、任意匹配
		扩展名与路径互斥，启动时报错
		优先级：精确 > 最长路径 > 扩展名 > /(默认匹配路径)
	-->
	<servlet-mapping>
		<servlet-name>TestingServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 
		springmvc会自动给路径匹配加上url-pattern中配置的路径前缀的，所以在RequestMapping中不能加前缀部分 
	-->
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/springmvc/*</url-pattern>
		<url-pattern>/mybatis/*</url-pattern>
	</servlet-mapping>

	<session-config>
		<!-- value <=0, 0/-1 means "never time-out" unless timeout manually(?) -->
		<!-- 1.HttpSession.setMaxInactiveInterval(paramInt). The time unit of paramInt is second. -->
		<!-- 2.session-timeout in web application. The time unit of paramInt is minute. -->
		<!-- 3.session-timeout in web server, such as, tomcat. -->
		<!-- Priority is 1 > 2 > 3 -->
		<!-- As for tomcat, the default value is 30min -->
		<session-timeout>15</session-timeout>
	</session-config>
</web-app>
